apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: desktop-gating-tests
spec:
  params:
    - name: SNAPSHOT
      type: string
    - name: JENKINS_URL
      type: string
    - name: JENKINS_USER
      type: string
    - name: JENKINS_API_TOKEN
      type: string
    - name: ARCH
      type: string
    - name: PULL_SECRET_NAME
      type: string
      default: ""
  volumes:
    - name: pull-secret-volume
      secret:
        secretName: "$(params.PULL_SECRET_NAME)"
  results:
    - name: REQUEST_URL
      description: The Jenkins queue URL
    - name: ARTIFACTS_URL
      description: URL to the Jenkins job artifacts
    - name: TEST_OUTPUT
      description: Output of the test results
  steps:
    - name: trigger-jenkins
      image: quay.io/vhumpa/jenkins-watcher:latest
      volumeMounts:
        - name: pull-secret-volume
          mountPath: "/etc/secrets/pull-secret-volume"
          readOnly: true
      env:
        - name: SNAPSHOT
          value: $(params.SNAPSHOT)
        - name: JENKINS_URL
          value: $(params.JENKINS_URL)
        - name: JENKINS_USER
          value: $(params.JENKINS_USER)
        - name: JENKINS_API_TOKEN
          value: $(params.JENKINS_API_TOKEN)
        - name: ARCH
          value: $(params.ARCH)
      script: |
        #!/bin/bash
        #set -e
        set -x

        echo $SNAPSHOT

        if [ -z "$ARCH" ]; then
          ARCH="x86_64"
        fi
        echo $ARCH

        if [ "$ARCH" == "x86_64" ]; then
          OPENSTACK="true"
        else
          OPENSTACK="false"
        fi

        # Extracting the component using sed
        COMPONENT=$(echo "$JENKINS_URL" | sed -E 's#.*/job/beaker-([^/]+)-RHEL-.*#\1#')

        # For "toolbox-container" set just "toolbox" - difference in git repo name from brew times
        if [ "$COMPONENT" == "toolbox-container" ]; then
          COMPONENT="toolbox"
        fi
        if [ "$COMPONENT" == "flatpak-runtime-container" ]; then
          COMPONENT="flatpak-runtime"
        fi
        if [ "$COMPONENT" == "flatpak-sdk-container" ]; then
          COMPONENT="flatpak-sdk"
        fi

        if [[ -z "$CONTAINER_IMAGE" ]]; then
            # Gather ref from SNAPSHOT itself
            export CONTAINER_IMAGE=$(python3 -c "import os; import json; print([v for v in json.loads(os.environ['SNAPSHOT'])['components'] if '$COMPONENT' in v['name']][0]['containerImage'])")
        fi

        # Read the pull secret's content from the mounted secret volume
        AUTH=$(cat /etc/secrets/pull-secret-volume/.dockerconfigjson)
        echo $AUTH
        # Extract first "id:auth" from the full .dockerconfigjson
        PAIR=$(jq -r '.auths
        | to_entries[]
        | "\(.key):\(.value.auth)"' \
        /etc/secrets/pull-secret-volume/.dockerconfigjson \
        | head -n1)
        
        # Only pass the id:auth pair to Jenkins to avoid URLencoding issues
        AUTH_PARAM="$PAIR"
        echo $AUTH_PARAM
        JOB_PARAMETERS="VERSION=SNAPSHOT:$CONTAINER_IMAGE&OPENSTACK=$OPENSTACK&WAYLAND=true&RUN_TAGS=gate&ARCH=$ARCH&QECORE_COREDUMP_FETCH=true&AUTH=$AUTH_PARAM"
        echo "JOB_PARAMETERS: $JOB_PARAMETERS"

        echo "Triggering Jenkins job..."
        response=$(curl -k -v -i -u $JENKINS_USER:$JENKINS_API_TOKEN -X POST "$JENKINS_URL/buildWithParameters?$JOB_PARAMETERS")

        echo "Response from Jenkins:"
        echo "$response"

        queue_url=$(echo "$response" | grep "Location:" | cut -d ' ' -f2 | tr -d '\r')
        echo "Queue URL: $queue_url"
        echo $queue_url > $(results.REQUEST_URL.path)

        echo "Waiting for the job to start..."
        while : ; do
            build_url=$(curl -k -s -u $JENKINS_USER:$JENKINS_API_TOKEN "$queue_url/api/json" | jq -r '.executable.url')
            echo "Build URL: $build_url"
            if [ "$build_url" != "null" ]; then
                break
            fi
            sleep 10
        done

        echo "Waiting for the job to complete..."
        while : ; do
            status=$(curl -k -s -u $JENKINS_USER:$JENKINS_API_TOKEN "$build_url/api/json" | jq -r '.result')
            echo "Job status: $status"
            if [ "$status" != "null" ]; then
                break
            fi
            sleep 60
        done

        sleep 60

        if [ "$OPENSTACK" == "false" ]; then
          sleep 200
        else
          sleep 15
        fi
        # get the status again to fight wired race conditions with status change in processing results in beaker???
        status=$(curl -k -s -u $JENKINS_USER:$JENKINS_API_TOKEN "$build_url/api/json" | jq -r '.result')

        # Get test results from Jenkins
        test_report_url="${build_url}testReport/api/json"
        test_results=$(curl -k -s -u $JENKINS_USER:$JENKINS_API_TOKEN "$test_report_url" || echo '{}')

        successes=$(echo "$test_results" | jq '.passCount // 0' 2>/dev/null || echo 0)
        failures=$(echo "$test_results" | jq '.failCount // 0' 2>/dev/null || echo 0)
        warnings=$(echo "$test_results" | jq '.skipCount // 0' 2>/dev/null || echo 0)

        # Mapping Jenkins status to Tekton-compatible results
        case "$status" in
            "SUCCESS")
                tekton_status="SUCCESS"
                ;;
            "FAILURE")
                tekton_status="FAILURE"
                ;;
            "UNSTABLE")
                tekton_status="FAILURE"
                ;;
            *)
                tekton_status="ERROR"
                ;;
        esac

        # Capture the current timestamp
        timestamp=$(date +%s)

        artifacts_url="${build_url}artifact/artifacts/"
        echo $artifacts_url > $(results.ARTIFACTS_URL.path)

        test_output="{\"result\":\"$tekton_status\",\"timestamp\":\"$timestamp\",\"successes\":$successes,\"failures\":$failures,\"warnings\":$warnings}"
        echo $test_output > $(results.TEST_OUTPUT.path)

        echo "Jenkins job completed with status: $status"
        echo "Overall test status: $tekton_status"
        # if [ "$tekton_status" != "SUCCESS" ]; then  ### NOPE! This still kills the pipeline seamingly early???? 
        #     python3 -c "raise SystemExit(1)"
        # fi
